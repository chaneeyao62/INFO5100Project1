grid = 10^seq(10,-2,length = 100)
beta = c(rep(2,5),rep(0,45))
ridge.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=grid)
best.lambda = ridge.best.fit$lambda.min
ridge.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=best.lambda)
ridge.pred = predict(ridge.mod,s = best.lambda,newx = X_te)
Y_te = X_te%*%beta+eps_te
MSE[k] = mean((ridge.pred-Y_te)^2)
}
MSE
ridge.MSE = NULL
lasso.MSE = NULL
for (k in 1:50){
set.seed(k)
X_train = array(rnorm(p*N),c(N,p))
eps_train = rnorm(N)
Nte = 10^3
X_te = array(rnorm(p*Nte),c(Nte,p))
eps_te = rnorm(Nte)
grid = 10^seq(10,-2,length = 100)
beta = c(rep(2,5),rep(0,45))
ridge.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=grid)
best.lambda = ridge.best.fit$lambda.min
ridge.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=best.lambda)
ridge.pred = predict(ridge.mod,s = best.lambda,newx = X_te)
Y_te = X_te%*%beta+eps_te
ridge.MSE[k] = mean((ridge.pred-Y_te)^2)
lasso.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=grid)
best.lambda = lasso.best.fit$lambda.min
lasso.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=best.lambda)
lasso.coef = coef(lasso.mod)[,1]
lasso.coef[lasso.coef!=0]
lasso.pred = predict(lasso.mod,s = best.lambda,newx = X_te)
lasso.MSE[k] = mean((lasso.pred-Y_te)^2)
}
boxplot(ridge.MSE)
boxplot(ridge.MSE,lasso.MSE)
?boxplot()
boxplot(ridge = ridge.MSE,lasso.MSE)
boxplot(ridge.MSE,lasso.MSE)
boxplot(ridge.MSE,lasso.MSE)
?boxplot()
boxplot(ridge.MSE,lasso.MSE, col = c("ridge","lasso"))
boxplot(ridge.MSE,lasso.MSE)
boxplot(ridge.MSE,lasso.MSE, names = c("ridge","lasso"))
ridge.MSE = NULL
lasso.MSE = NULL
for (k in 1:50){
set.seed(k)
X_train = array(rnorm(p*N),c(N,p))
eps_train = rnorm(N)
Nte = 10^3
X_te = array(rnorm(p*Nte),c(Nte,p))
eps_te = rnorm(Nte)
grid = 10^seq(10,-2,length = 100)
beta = rep(0.5,50)
ridge.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=grid)
best.lambda = ridge.best.fit$lambda.min
ridge.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=best.lambda)
ridge.pred = predict(ridge.mod,s = best.lambda,newx = X_te)
Y_te = X_te%*%beta+eps_te
ridge.MSE[k] = mean((ridge.pred-Y_te)^2)
lasso.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=grid)
best.lambda = lasso.best.fit$lambda.min
lasso.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=best.lambda)
lasso.coef = coef(lasso.mod)[,1]
lasso.coef[lasso.coef!=0]
lasso.pred = predict(lasso.mod,s = best.lambda,newx = X_te)
lasso.MSE[k] = mean((lasso.pred-Y_te)^2)
}
boxplot(ridge.MSE,lasso.MSE, names = c("ridge","lasso"))
ridge.MSE = NULL
lasso.MSE = NULL
for (k in 1:50){
set.seed(k)
X_train = array(rnorm(p*N),c(N,p))
eps_train = rnorm(N)
Nte = 10^3
X_te = array(rnorm(p*Nte),c(Nte,p))
eps_te = rnorm(Nte)
grid = 10^seq(10,-2,length = 100)
beta = c(rep(2,5),rep(0,45))
ridge.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=grid)
best.lambda = ridge.best.fit$lambda.min
ridge.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=best.lambda)
ridge.pred = predict(ridge.mod,s = best.lambda,newx = X_te)
Y_te = X_te%*%beta+eps_te
ridge.MSE[k] = mean((ridge.pred-Y_te)^2)
lasso.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=grid)
best.lambda = lasso.best.fit$lambda.min
lasso.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=best.lambda)
lasso.coef = coef(lasso.mod)[,1]
lasso.coef[lasso.coef!=0]
lasso.pred = predict(lasso.mod,s = best.lambda,newx = X_te)
lasso.MSE[k] = mean((lasso.pred-Y_te)^2)
}
boxplot(ridge.MSE,lasso.MSE, names = c("ridge","lasso"))
lasso.MSE
ridge.MSE = NULL
lasso.MSE = NULL
for (k in 2:50){
set.seed(k)
X_train = array(rnorm(p*N),c(N,p))
eps_train = rnorm(N)
Nte = 10^3
X_te = array(rnorm(p*Nte),c(Nte,p))
eps_te = rnorm(Nte)
grid = 10^seq(10,-2,length = 100)
beta = c(rep(2,5),rep(0,45))
ridge.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=grid)
best.lambda = ridge.best.fit$lambda.min
ridge.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=0,lambda=best.lambda)
ridge.pred = predict(ridge.mod,s = best.lambda,newx = X_te)
Y_te = X_te%*%beta+eps_te
ridge.MSE[k] = mean((ridge.pred-Y_te)^2)
lasso.best.fit = cv.glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=grid)
best.lambda = lasso.best.fit$lambda.min
lasso.mod=glmnet(X_train,X_train%*%beta+eps_train,alpha=1,lambda=best.lambda)
lasso.coef = coef(lasso.mod)[,1]
lasso.coef[lasso.coef!=0]
lasso.pred = predict(lasso.mod,s = best.lambda,newx = X_te)
lasso.MSE[k] = mean((lasso.pred-Y_te)^2)
}
boxplot(ridge.MSE,lasso.MSE, names = c("ridge","lasso"))
T = seq(1/2,4,by=1/2)
T
exp(0)
y = 0.03 + (0.02+0.01*T)*exp(-0.3*T)
y
D = exp(-y*T)
C = c(rep(21,7),1021)
prices = C*D
options(digits=6)
sum(prices)
duration = sum(T*prices) / sum(prices)
round(duration,3)
T = seq(1/2,4,by=1/2)
y = 0.03 + (0.02+0.01*T)*exp(-0.3*T)
y
C = c(rep(21,7),1021)
C
D
D = exp(-y*T)
D
C
T
prices = C*D
prices
0.9745701*21
D = exp(-y*T)
payment = c(rep(21,7),1021)
prices = payment*D
options(digits=6)
sum(prices)
T = seq(1/2,4,by=1/2)
y = 0.03 + (0.02+0.01*T)*exp(-0.3*T)
#discount function
D = exp(-y*T)
payment = c(rep(21,7),1021)
prices = payment*D
options(digits=6)
sum(prices)
samples = c(4, 11, 6, 7, 3, 7, 2, 4, 15, 6, 7, 5, 4, 15, 7, 5, 7)
barplot(samples)
histogram(samples)
hist(samples)
?hist()
hist(samples,breaks = 1)
hist(samples,breaks = 10)
hist(samples,breaks = 20)
hist(samples,breaks = 40)
hist(samples,breaks = 20)
hist(samples,breaks = 15)
hist(samples,breaks = 15)
hist(samples,seq(min(samples)-0.5, max(samples)+0.5, by=1))
mean(samples)
median(samples)
mode(samples)
sd(samples)
mean(samples)
median(samples)
sd(samples)
samples
length(samples)
3/17
mean(samples)-sd(samples)
mean(samples)+sd(samples)
qnorm(0.025)
qnorm(0.1)
sqrt(2)*1.96-1
qnorm(0.1\0.975)
qnorm(0.975)
library("Ecdat")
install.packages("Ecdat")
library("Ecdat")
?CPSch3
data(CPSch3)
dimnames(CPSch3)[[2]]
dimnames(CPSch3)[[2]]
male.earnings = CPSch3[CPSch3[ ,3] == "male", 2]
sqrt.male.earnings = sqrt(male.earnings)
log.male.earnings = log(male.earnings)
par(mfrow = c(2, 2))
qqnorm(male.earnings ,datax = TRUE, main = "untransformed")
qqnorm(sqrt.male.earnings, datax = TRUE,
main = "square-root transformed")
qqnorm(log.male.earnings, datax = TRUE, main = "log-transformed")
par(mfrow = c(2, 2))
boxplot(male.earnings, main = "untransformed")
boxplot(sqrt.male.earnings, main = "square-root transformed")
boxplot(log.male.earnings, main = "log-transformed")
par(mfrow = c(2,2))
plot(density(male.earnings), main = "untransformed")
plot(density(sqrt.male.earnings), main = "square-root transformed")
plot(density(log.male.earnings), main = "log-transformed")
head(CPSch3)
?CPSch3
data(CPSch3)
dimnames(CPSch3)[[2]]
male.earnings = CPSch3[CPSch3[ ,3] == "male", 2]
sqrt.male.earnings = sqrt(male.earnings)
log.male.earnings = log(male.earnings)
par(mfrow = c(2, 2))
qqnorm(male.earnings ,datax = TRUE, main = "untransformed")
qqnorm(sqrt.male.earnings, datax = TRUE,
main = "square-root transformed")
qqnorm(log.male.earnings, datax = TRUE, main = "log-transformed")
par(mfrow = c(2, 2))
boxplot(male.earnings, main = "untransformed")
boxplot(sqrt.male.earnings, main = "square-root transformed")
boxplot(log.male.earnings, main = "log-transformed")
par(mfrow = c(2,2))
plot(density(male.earnings), main = "untransformed")
plot(density(sqrt.male.earnings), main = "square-root transformed")
plot(density(log.male.earnings), main = "log-transformed")
square = male.earnings^2
qqnorm(square, datax = TRUE,
main = "square-root transformed")
plot(density(square), main = "untransformed")
cube_square = male.earnings^(1/3)
qqnorm(cube_root, datax = TRUE,
main = "cube_root")
plot(density(cube_root), main = "cube_root")
cube_root = male.earnings^(1/3)
qqnorm(cube_root, datax = TRUE,
main = "cube_root")
plot(density(cube_root), main = "cube_root")
cube_root = male.earnings^(1/3)
qqnorm(cube_root, datax = TRUE,
main = "cube_root")
boxplot(sqrt.male.earnings, main = "cube_root")
plot(density(cube_root), main = "cube_root")
library("Ecdat")
?CPSch3
data(CPSch3)
dimnames(CPSch3)[[2]]
male.earnings = CPSch3[CPSch3[ ,3] == "male", 2]
sqrt.male.earnings = sqrt(male.earnings)
log.male.earnings = log(male.earnings)
par(mfrow = c(2, 2))
qqnorm(male.earnings ,datax = TRUE, main = "untransformed")
qqnorm(sqrt.male.earnings, datax = TRUE,
main = "square-root transformed")
qqnorm(log.male.earnings, datax = TRUE, main = "log-transformed")
par(mfrow = c(2, 2))
boxplot(male.earnings, main = "untransformed")
boxplot(sqrt.male.earnings, main = "square-root transformed")
boxplot(log.male.earnings, main = "log-transformed")
par(mfrow = c(2,2))
par(mfrow = c(2, 2))
boxplot(male.earnings, main = "untransformed")
boxplot(sqrt.male.earnings, main = "square-root transformed")
boxplot(log.male.earnings, main = "log-transformed")
par(mfrow = c(2,2))
plot(density(male.earnings), main = "untransformed")
plot(density(sqrt.male.earnings), main = "square-root transformed")
plot(density(log.male.earnings), main = "log-transformed")
cube_root = male.earnings^(1/3)
qqnorm(cube_root, datax = TRUE,
main = "cube_root")
boxplot(sqrt.male.earnings, main = "cube_root")
plot(density(cube_root), main = "cube_root")
par(mfrow = c(2,2))
cube_root = male.earnings^(1/3)
qqnorm(cube_root, datax = TRUE,
main = "cube_root")
boxplot(sqrt.male.earnings, main = "cube_root")
plot(density(cube_root), main = "cube_root")
library("MASS")
par(mfrow = c(1, 1))
boxcox(male.earnings ~ 1)
boxcox(male.earnings ~ 1, lambda = seq(0.3, 0.45, 1 / 100))
bc = boxcox(male.earnings ~ 1, lambda = seq(0.3, 0.45, by = 1 / 100),
interp = FALSE)
ind = (bc$y == max(bc$y))
ind2 = (bc$y > max(bc$y) - qchisq(0.95, df = 1) / 2)
bc$x[ind]
bc$x[ind2]
par(mfrow = c(1, 1))
boxcox(male.earnings ~ 1)
boxcox(male.earnings ~ 1, lambda = seq(0.3, 0.45, 1 / 100))
bc = boxcox(male.earnings ~ 1, lambda = seq(0.3, 0.45, by = 1 / 100),
interp = FALSE)
ind = (bc$y == max(bc$y))
ind2 = (bc$y > max(bc$y) - qchisq(0.95, df = 1) / 2)
bc$x[ind]
bc$x[ind2]
?boxcox()
ind3 = (bc$y > max(bc$y) - qchisq(0.90, df = 1) / 2);ind3
par(mfrow = c(1, 1))
boxcox(male.earnings ~ 1)
boxcox(male.earnings ~ 1, lambda = seq(0.3, 0.45, 1 / 100))
bc = boxcox(male.earnings ~ 1, lambda = seq(0.3, 0.45, by = 1 / 100),
interp = FALSE)
ind = (bc$y == max(bc$y))
ind2 = (bc$y > max(bc$y) - qchisq(0.95, df = 1) / 2)
bc$x[ind]
bc$x[ind2]
ind3 = (bc$y > max(bc$y) - qchisq(0.90, df = 1) / 2);ind3
ind3 = (bc$y > max(bc$y) - qchisq(0.90, df = 1) / 2);bc$x[ind3]
ind3 = (bc$y > max(bc$y) - qchisq(0.99, df = 1) / 2);bc$x[ind3]
setwd("~/Desktop")
library("fGarch")
returns = read.csv("returns.csv")
n = dim(returns)
n
kurt = kurtosis(returns[ ,2], method = "moment")
skew = skewness(returns[,2], method = "moment")
fit_skewt = sstdFit(returns[ ,2])
kurt
skew
fit_skewt
q.grid = (1:n) / (n+1)
q.grid
bmwRet = read.csv("bmwRet.csv")
bmwRet
returns = read.csv("returns.csv")
n = dim(returns)[1]
kurt = kurtosis(returns[ ,2], method = "moment")
skew = skewness(returns[,2], method = "moment")
fit_skewt = sstdFit(returns[ ,2])
q.grid = (1:n) / (n+1)
qqplot(bmwRet[ ,2], qsstd(q.grid, fit_skewt$estimate[1],
fit_skewt$estimate[2],
fit_skewt$estimate[3], fit_skewt$estimate[4]),
ylab = "skewed-t quantiles" )
qqplot(returns[ ,2], qsstd(q.grid, fit_skewt$estimate[1],
fit_skewt$estimate[2],
fit_skewt$estimate[3], fit_skewt$estimate[4]),
ylab = "skewed-t quantiles" )
fit_skewt$estimate
fit_skewt$estimate
fit_skewt$estimate$nu
fit_skewt$estimate$[3]
fit_skewt$estimate[3]
option(fit_skewt$estimate[3],4)
options(fit_skewt$estimate[3],4)
?options()
options(fit_skewt$estimate[3],digits = 4)
options(digits = 6)
fit_skewt$estimate
options(digits = 4)
fit_skewt$estimate
options(digits = 3)
fit_skewt$estimate
nu = seq(1,10,by=0.25)
p1=0.025
p2=0.25
numerator = qt(1-p1,df=nu)-qt(p1,df=nu)
denominator = qt(1-p2,df=nu)-qt(p2,df=nu)
plot(nu,numerator/denominator,ylab=expression(paste("quKurt(",nu,")")),
xlab=expression(nu))
quKurt = function(y, p1 = 0.025, p2 = 0.25)
{
Q = quantile(y, c(p1, p2, 1 - p2, 1 - p1))
k = (Q[4] - Q[1]) / (Q[3] - Q[2])
k
}
nboot = 5000
ModelFree_kurt  = rep(0, nboot)
ModelBased_kurt = rep(0, nboot)
set.seed("5640")
for (i in 1:nboot)
{
samp_ModelFree = sample(returns[,2], n, replace = TRUE)
samp_ModelBased = rsstd(n, fit_skewt$estimate[1],
fit_skewt$estimate[2],
fit_skewt$estimate[3], fit_skewt$estimate[4])
ModelFree_kurt[i] = quKurt(samp_ModelFree)
ModelBased_kurt[i] = quKurt(samp_ModelBased)
}
par(mfrow = c(1,2))
plot(density(ModelFree_kurt))
plot(density(ModelBased_kurt))
par(mfrow = c(1,1))
boxplot(cbind(ModelFree_kurt,ModelBased_kurt))
library(bootstrap)
bcanon(reurns[,2],5000,quKurt)$confpoints
bcanon(returns[,2],5000,quKurt)$confpoints
quantile(ModelFree_kurt,c(0.05,0.95))
quantile(ModelBased_kurt,c(0.05,0.95))
setwd("~/Documents/GitHub/INFO5100Project1")
tech = dat = read.csv("TechnologyIndex.csv")
head(tech)
tech = read.csv("TechnologyIndex.csv")
tech[,1]
tech[,1:8]
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
head(tech)
tech
histogram(tech[,3])
hist(tech[,3])
hist(c(tech[,3]))
hist(c(tech[,3]), breaks = 20)
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
tech
hist(c(tech[,3]), breaks = 20)
tech[,3]
c(tech[,3])
as.numeric(tech[,3])
tech[,3]
tech[,3][2]
as.numeric(levels(tech[,3]))[tech[,3]]
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
tech[,3]
hist(tech[,3])
tech
tech[,3]
tech[,3][-length(tech)]
dim(tech[,3])
length(tech[,3])
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
tech[,3][-length(length(tech[,3]))]
-length(length(tech[,3]))
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
tech[,3][-length(tech[,3])]
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V)
hist(iPhone_wo_V, xlab = "IPhone price")
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone")
Android_wo_V = tech[,4][-length(tech[,4])]
hist(Android_wo_V, xlab = "Price", main = "Price of Android")
tech = tech[,1:8]
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone")
Android_wo_V = tech[,4][-length(tech[,4])]
hist(Android_wo_V, xlab = "Price", main = "Price of Android")
MacBook_wo_V = tech[,5][-length(tech[,5])]
hist(MacBook_wo_V, xlab = "Price", main = "Price of MacBook")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered")
tech = tech[,1:8]
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone")
Android_wo_V = tech[,4][-length(tech[,4])]
hist(Android_wo_V, xlab = "Price", main = "Price of Android")
MacBook_wo_V = tech[,5][-length(tech[,5])]
hist(MacBook_wo_V, xlab = "Price", main = "Price of MacBook")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered")
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone w/o Venezuela")
Android_wo_V = tech[,4][-length(tech[,4])]
hist(Android_wo_V, xlab = "Price", main = "Price of Android w/o Venezuela")
MacBook_wo_V = tech[,5][-length(tech[,5])]
hist(MacBook_wo_V, xlab = "Price", main = "Price of MacBook w/o Venezuela")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered w/o Venezuela")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered w/o Venezuela")
setwd("~/Documents/GitHub/INFO5100Project1")
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
head(tech)
hist(Windows.Powered_wo_V, xlab = "Price")
Windows.Powered_wo_V = tech[,8][-length(tech[,8])]
hist(Windows.Powered_wo_V, xlab = "Price")
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone w/o Venezuela")
Xbox_wo_V = tech[,8][-length(tech[,8])]
hist(Xbox_wo_V, xlab = "Price")
Xbox_wo_V
iPhone_wo_V
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone w/o Venezuela")
Android_wo_V = tech[,4][-length(tech[,4])]
hist(Android_wo_V, xlab = "Price", main = "Price of Android w/o Venezuela")
MacBook_wo_V = tech[,5][-length(tech[,5])]
hist(MacBook_wo_V, xlab = "Price", main = "Price of MacBook w/o Venezuela")
Windows.Powered_wo_V = tech[,6][-length(tech[,6])]
hist(Windows.Powered_wo_V, xlab = "Price", main = "Price of Windows.Powered w/o Venezuela")
tech = read.csv("TechnologyIndex.csv")
tech = tech[,1:8]
iPhone_wo_V = tech[,3][-length(tech[,3])]
hist(iPhone_wo_V, xlab = "Price", main = "Price of iPhone w/o Venezuela")
Android_wo_V = tech[,4][-length(tech[,4])]
hist(Android_wo_V, xlab = "Price", main = "Price of Android w/o Venezuela")
MacBook_wo_V = tech[,5][-length(tech[,5])]
Xbox_wo_V = tech[,8][-1]
hist(Xbox_wo_V, xlab = "Price")
hist(Xbox_wo_V, xlab = "Price",breaks = 6)
hist(Xbox_wo_V, xlab = "Price",breaks = 6,xlim = (0,3000))
hist(Xbox_wo_V, xlab = "Price",breaks = 6,xlim = c(0,3000))
